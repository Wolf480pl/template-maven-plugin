/*
 * This file is part of Spout.
 *
 * Copyright (c) 2011 Spout LLC <http://www.spout.org/>
 * Spout is licensed under the Spout License Version 1.
 *
 * Spout is free software: you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * In addition, 180 days after any changes are published, you can use the
 * software, incorporating those changes, under the terms of the MIT license,
 * as described in the Spout License Version 1.
 *
 * Spout is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for
 * more details.
 *
 * You should have received a copy of the GNU Lesser General Public License,
 * the MIT license and the Spout License Version 1 along with this program.
 * If not, see <http://www.gnu.org/licenses/> for the GNU Lesser General Public
 * License and see <http://spout.in/licensev1> for the full license, including
 * the MIT license.
 */
package org.spout.math.vector;

import java.io.Serializable;
import java.util.Random;

import org.spout.math.GenericMath;
import org.spout.math.TrigMath;

public class Vector2#E# implements Vector#E#, Comparable<Vector2#E#>, Serializable, Cloneable {
	private static final long serialVersionUID = 1;
	public static final Vector2#E# ZERO = new Vector2#E#(0, 0);
	public static final Vector2#E# UNIT_X = new Vector2#E#(1, 0);
	public static final Vector2#E# UNIT_Y = new Vector2#E#(0, 1);
	private final #e# x;
	private final #e# y;
	private transient volatile boolean hashed = false;
	private transient volatile int hashCode = 0;

	public Vector2#E#() {
		this(0, 0);
	}

	public Vector2#E#(Vector2#E# v) {
		this(v.x, v.y);
	}

	public Vector2#E#(Vector3#E# v) {
		this(v.getX(), v.getY());
	}

	public Vector2#E#(Vector4#E# v) {
		this(v.getX(), v.getY());
	}

	public Vector2#E#(VectorN#E# v) {
		this(v.get(0), v.get(1));
	}

	public Vector2#E#(#EOverload# x, #EOverload# y) {
		this((#e#) x, (#e#) y);
	}

	public Vector2#E#(#e# x, #e# y) {
		this.x = x;
		this.y = y;
	}

	public #e# getX() {
		return x;
	}

	public #e# getY() {
		return y;
	}

	public int getFloorX() {
		return GenericMath.floor(x);
	}

	public int getFloorY() {
		return GenericMath.floor(y);
	}

	public Vector2#E# add(Vector2#E# v) {
		return add(v.x, v.y);
	}

	public Vector2#E# add(#EOverload# x, #EOverload# y) {
		return add((#e#) x, (#e#) y);
	}

	public Vector2#E# add(#e# x, #e# y) {
		return new Vector2#E#(this.x + x, this.y + y);
	}

	public Vector2#E# sub(Vector2#E# v) {
		return sub(v.x, v.y);
	}

	public Vector2#E# sub(#EOverload# x, #EOverload# y) {
		return sub((#e#) x, (#e#) y);
	}

	public Vector2#E# sub(#e# x, #e# y) {
		return new Vector2#E#(this.x - x, this.y - y);
	}

	public Vector2#E# mul(#EOverload# a) {
		return mul((#e#) a);
	}

	@Override
	public Vector2#E# mul(#e# a) {
		return mul(a, a);
	}

	public Vector2#E# mul(Vector2#E# v) {
		return mul(v.x, v.y);
	}

	public Vector2#E# mul(#EOverload# x, #EOverload# y) {
		return mul((#e#) x, (#e#) y);
	}

	public Vector2#E# mul(#e# x, #e# y) {
		return new Vector2#E#(this.x * x, this.y * y);
	}

	public Vector2#E# div(#EOverload# a) {
		return div((#e#) a);
	}

	@Override
	public Vector2#E# div(#e# a) {
		return div(a, a);
	}

	public Vector2#E# div(Vector2#E# v) {
		return div(v.x, v.y);
	}

	public Vector2#E# div(#EOverload# x, #EOverload# y) {
		return div((#e#) x, (#e#) y);
	}

	public Vector2#E# div(#e# x, #e# y) {
		return new Vector2#E#(this.x / x, this.y / y);
	}

	public #e# dot(Vector2#E# v) {
		return dot(v.x, v.y);
	}

	public #e# dot(#EOverload# x, #EOverload# y) {
		return dot((#e#) x, (#e#) y);
	}

	public #e# dot(#e# x, #e# y) {
		return this.x * x + this.y * y;
	}

	public Vector2#E# pow(#EOverload# pow) {
		return pow((#e#) pow);
	}

	@Override
	public Vector2#E# pow(#e# power) {
		return new Vector2#E#(Math.pow(x, power), Math.pow(y, power));
	}

	@Override
	public Vector2#E# ceil() {
		return new Vector2#E#(Math.ceil(x), Math.ceil(y));
	}

	@Override
	public Vector2#E# floor() {
		return new Vector2#E#(GenericMath.floor(x), GenericMath.floor(y));
	}

	@Override
	public Vector2#E# round() {
		return new Vector2#E#(Math.round(x), Math.round(y));
	}

	@Override
	public Vector2#E# abs() {
		return new Vector2#E#(Math.abs(x), Math.abs(y));
	}

	@Override
	public Vector2#E# negate() {
		return new Vector2#E#(-x, -y);
	}

	public Vector2#E# min(Vector2#E# v) {
		return min(v.x, v.y);
	}

	public Vector2#E# min(#EOverload# x, #EOverload# y) {
		return min((#e#) x, (#e#) y);
	}

	public Vector2#E# min(#e# x, #e# y) {
		return new Vector2#E#(Math.min(this.x, x), Math.min(this.y, y));
	}

	public Vector2#E# max(Vector2#E# v) {
		return max(v.x, v.y);
	}

	public Vector2#E# max(#EOverload# x, #EOverload# y) {
		return max((#e#) x, (#e#) y);
	}

	public Vector2#E# max(#e# x, #e# y) {
		return new Vector2#E#(Math.max(this.x, x), Math.max(this.y, y));
	}

	public #e# distanceSquared(Vector2#E# v) {
		return distanceSquared(v.x, v.y);
	}

	public #e# distanceSquared(#EOverload# x, #EOverload# y) {
		return distanceSquared((#e#) x, (#e#) y);
	}

	public #e# distanceSquared(#e# x, #e# y) {
		return (#e#) GenericMath.lengthSquared(this.x - x, this.y - y);
	}

	public #e# distance(Vector2#E# v) {
		return distance(v.x, v.y);
	}

	public #e# distance(#EOverload# x, #EOverload# y) {
		return distance((#e#) x, (#e#) y);
	}

	public #e# distance(#e# x, #e# y) {
		return (#e#) GenericMath.length(this.x - x, this.y - y);
	}

	@Override
	public #e# lengthSquared() {
		return (#e#) GenericMath.lengthSquared(x, y);
	}

	@Override
	public #e# length() {
		return (#e#) GenericMath.length(x, y);
	}

	@Override
	public Vector2#E# normalize() {
		final #e# length = length();
		return new Vector2#E#(x / length, y / length);
	}

	/**
	 * Return the axis with the minimal value.
	 *
	 * @return {@link int} axis with minimal value
	 */
	@Override
	public int getMinAxis() {
		return x < y ? 0 : 1;
	}

	/**
	 * Return the axis with the maximum value.
	 *
	 * @return {@link int} axis with maximum value
	 */
	@Override
	public int getMaxAxis() {
		return x > y ? 0 : 1;
	}

	public Vector3 toVector3() {
		return toVector3(0);
	}

	public Vector3 toVector3(#EOverload# z) {
		return toVector3((#e#) z);
	}

	public Vector3 toVector3(#e# z) {
		return new Vector3#E#(this, z);
	}

	public Vector4 toVector4() {
		return toVector4(0, 0);
	}

	public Vector4 toVector4(#EOverload# z, #EOverload# w) {
		return toVector4#E#((#e#) z, (#e#) w);
	}

	public Vector4 toVector4(#e# z, #e# w) {
		return new Vector4#E#(this, z, w);
	}

	public VectorN toVectorN() {
		return new VectorN(this);
	}

	@Override
	public #e#[] toArray() {
		return new #e#[]{x, y};
	}

	@Override
	public int compareTo(Vector2#E# v) {
		return (int) (lengthSquared() - v.lengthSquared());
	}

	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof Vector2#E#)) {
			return false;
		}
		final Vector2#E# Vector2#E# = (Vector2#E#) o;
		if (#ET#.compare(vector2.x, x) != 0) {
			return false;
		}
		if (#ET#.compare(vector2.y, y) != 0) {
			return false;
		}
		return true;
	}

	@Override
	public int hashCode() {
		if (!hashed) {
			final int result = (x != +0.0f ? #EHashFunc#(x) : 0);
			hashCode = 31 * result + (y != +0.0f ? #EHashFunc#(y) : 0);
			hashed = true;
		}
		return hashCode;
	}

	@Override
	public Vector2#E# clone() {
		return new Vector2#E#(this);
	}

	@Override
	public String toString() {
		return "(" + x + ", " + y + ")";
	}

	/**
	 * Gets the direction vector of a random angle using the random specified.
	 *
	 * @param random to use
	 * @return the random direction vector
	 */
	public static Vector2#E# createRandomDirection(Random random) {
		return createDirection(random.nextFloat() * (#e#) TrigMath.TWO_PI);
	}

	// TODO: add overloads for doubles and degree angles

	/**
	 * Gets the direction vector of a certain angle.
	 *
	 * @param angle in radians
	 * @return the direction vector
	 */
	public static Vector2#E# createDirection(#e# angle) {
		return new Vector2#E#(TrigMath.cos(angle), TrigMath.sin(angle));
	}
}
